<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/core-data/src/main/java/com/example/core_data/RakData.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/core-data/src/main/java/com/example/core_data/RakData.kt" />
              <option name="originalContent" value="package com.example.core_data&#10;&#10;import androidx.compose.runtime.mutableStateListOf&#10;&#10;// 数据类来存储Rak信息&#10;data class RakInfo(&#10;    val id: String, // 添加唯一标识符&#10;    val name: String,&#10;    val layer: Int,&#10;    val state: String = &quot;Idle&quot; // Default state is Idle&#10;)&#10;&#10;// 全局状态来存储Rak列表&#10;object RakManager {&#10;    private val _rakList = mutableStateListOf&lt;RakInfo&gt;()&#10;    val rakList: List&lt;RakInfo&gt; get() = _rakList.toList()&#10;&#10;    fun addRak(rak: RakInfo) {&#10;        _rakList.add(rak)&#10;    }&#10;&#10;    fun getRakNames(): List&lt;String&gt; {&#10;        return _rakList.map { it.name }&#10;    }&#10;&#10;    fun getRakByName(name: String): RakInfo? {&#10;        val target = name.trim().lowercase()&#10;        return _rakList.find { it.name.trim().lowercase() == target }&#10;    }&#10;&#10;    // 通过ID获取Rak信息&#10;    fun getRakById(id: String): RakInfo? {&#10;        return _rakList.find { it.id == id }&#10;    }&#10;&#10;    // 添加测试数据函数，用于测试滚动功能&#10;    fun addTestData() {&#10;        if (_rakList.isEmpty()) {&#10;            repeat(20) { index -&gt;&#10;                _rakList.add(RakInfo(&#10;                    id = &quot;TestRakID${index + 1}&quot;, // 为测试数据生成唯一ID&#10;                    name = &quot;Test Rak ${index + 1}&quot;,&#10;                    layer = (index % 5) + 1,&#10;                    state = if (index % 2 == 0) &quot;Idle&quot; else &quot;Non-Idle&quot;&#10;                ))&#10;            }&#10;        }&#10;    }&#10;&#10;    // 清空测试数据&#10;    fun clearTestData() {&#10;        _rakList.clear()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.core_data&#10;&#10;import androidx.compose.runtime.mutableStateListOf&#10;&#10;// 数据类来存储Rak信息&#10;data class RakInfo(&#10;    val id: String, // 添加唯一标识符&#10;    val name: String,&#10;    val layer: Int,&#10;    val state: String = &quot;Idle&quot; // Default state is Idle&#10;)&#10;&#10;// 全局状态来存储Rak列表&#10;object RakManager {&#10;    private val _rakList = mutableStateListOf&lt;RakInfo&gt;()&#10;    val rakList: List&lt;RakInfo&gt; get() = _rakList.toList()&#10;&#10;    fun addRak(rak: RakInfo) {&#10;        _rakList.add(rak)&#10;    }&#10;&#10;    fun getRakNames(): List&lt;String&gt; {&#10;        return _rakList.map { it.name }&#10;    }&#10;&#10;    fun getRakByName(name: String): RakInfo? {&#10;        val target = name.trim().lowercase()&#10;        return _rakList.find { it.name.trim().lowercase() == target }&#10;    }&#10;&#10;    // 通过ID获取Rak信息&#10;    fun getRakById(id: String): RakInfo? {&#10;        return _rakList.find { it.id == id }&#10;    }&#10;&#10;    // 添加测试数据函数，用于测试滚动功能&#10;    fun addTestData() {&#10;        if (_rakList.isEmpty()) {&#10;            repeat(20) { index -&gt;&#10;                _rakList.add(RakInfo(&#10;                    id = &quot;TestRakID${index + 1}&quot;, // 为测试数据生成唯一ID&#10;                    name = &quot;Test Rak ${index + 1}&quot;,&#10;                    layer = (index % 5) + 1,&#10;                    state = if (index % 2 == 0) &quot;Idle&quot; else &quot;Non-Idle&quot;&#10;                ))&#10;            }&#10;        }&#10;    }&#10;&#10;    // 清空测试数据&#10;    fun clearTestData() {&#10;        _rakList.clear()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/warehouse-management/src/main/java/com/example/warehouse_management/screen/SearchRak.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/warehouse-management/src/main/java/com/example/warehouse_management/screen/SearchRak.kt" />
              <option name="originalContent" value="package com.example.warehouse_management.screen&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxHeight&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Clear&#10;import androidx.compose.material3.DropdownMenuItem&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.ExposedDropdownMenuBox&#10;import androidx.compose.material3.ExposedDropdownMenuDefaults&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.SnackbarHost   &#10;import androidx.compose.material3.SnackbarHostState&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.material3.TextFieldDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.compose.rememberNavController&#10;import kotlinx.coroutines.launch&#10;import com.example.core_ui.components.BottomNavBar&#10;import com.example.core_ui.components.PageTitleBar&#10;import com.example.warehouse_management.components.FloatingActionButton&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SearchRakScreen() {&#10;    // Snackbar 控制器&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;    val scope = rememberCoroutineScope()&#10;    val navController = rememberNavController()&#10;&#10;    // Add state for search functionality&#10;    var searchText by remember { mutableStateOf(&quot;&quot;) }&#10;    var isSearchActive by remember { mutableStateOf(false) }&#10;&#10;    // Add state for filter functionality&#10;    var selectedFilter by remember { mutableStateOf(&quot;name (A~Z)&quot;) }&#10;&#10;    Scaffold(&#10;        modifier = Modifier&#10;            .fillMaxHeight(),&#10;        topBar = {&#10;            PageTitleBar(navController = navController)&#10;        },&#10;        bottomBar = {&#10;            BottomNavBar(navController = navController)&#10;        },&#10;        snackbarHost = { SnackbarHost(hostState = snackbarHostState) } // 挂载 Snackbar&#10;    ) { innerPadding -&gt;&#10;        // 页面主要内容&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                SearchBar(&#10;                    searchText = searchText,&#10;                    onSearchTextChange = {&#10;                        searchText = it&#10;                        isSearchActive = it.isNotEmpty()&#10;                    },&#10;                    onSearchClick = {&#10;                        // Implement search functionality here&#10;                        scope.launch {&#10;                            snackbarHostState.showSnackbar(&quot;Searching for: $searchText&quot;)&#10;                        }&#10;                    },&#10;                    onClearSearch = {&#10;                        searchText = &quot;&quot;&#10;                        isSearchActive = false&#10;                    },&#10;                    isSearchActive = isSearchActive&#10;                )&#10;                FilterBy(&#10;                    selectedFilter = selectedFilter,&#10;                    onFilterChange = { newFilter -&gt;&#10;                        selectedFilter = newFilter&#10;                        // Add filter logic here&#10;                        scope.launch {&#10;                            snackbarHostState.showSnackbar(&quot;Filter changed to: $newFilter&quot;)&#10;                        }&#10;                    }&#10;                )&#10;                Text(&#10;                    text = when {&#10;                        isSearchActive &amp;&amp; searchText.isNotBlank() -&gt; &quot;No Raks found matching '$searchText'&quot;&#10;                        else -&gt; &quot;No Rak added yet.\nAdd a new Rak from the Add Rak page.&quot;&#10;                    },&#10;                    fontSize = 16.sp,&#10;                    textAlign = TextAlign.Center,&#10;                    color = Color.Gray&#10;                )&#10;                FloatingActionButton(&#10;                    navController = navController,&#10;                    modifier = Modifier.padding(top = 16.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SearchBar(&#10;    searchText: String,&#10;    onSearchTextChange: (String) -&gt; Unit,&#10;    onSearchClick: () -&gt; Unit,&#10;    onClearSearch: () -&gt; Unit,&#10;    isSearchActive: Boolean&#10;) {&#10;    Box(&#10;        modifier = Modifier&#10;            .padding(20.dp)&#10;            .background(Color(0xFFFFFFFF))&#10;    ) {&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            TextField(&#10;                value = searchText,&#10;                onValueChange = onSearchTextChange,&#10;                placeholder = { Text(&quot;Search&quot;) },&#10;                modifier = Modifier.weight(1f),&#10;                colors = TextFieldDefaults.colors(&#10;                    unfocusedContainerColor = Color.Transparent,&#10;                    focusedContainerColor = Color.Transparent,&#10;                    unfocusedIndicatorColor = Color.Transparent,&#10;                    focusedIndicatorColor = Color.Transparent&#10;                )&#10;            )&#10;&#10;            // Clear button (only show when search is active)&#10;            if (isSearchActive &amp;&amp; searchText.isNotBlank()) {&#10;                IconButton(&#10;                    onClick = onClearSearch,&#10;                    modifier = Modifier.padding(5.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Clear,&#10;                        contentDescription = &quot;Clear Search&quot;,&#10;                        modifier = Modifier.size(24.dp),&#10;                        tint = Color.Gray&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun FilterBy(&#10;    selectedFilter: String,&#10;    onFilterChange: (String) -&gt; Unit&#10;) {&#10;    val options = listOf(&#10;        &quot;name (A~Z)&quot;, &quot;name (Z~A)&quot;,&#10;        &quot;Idle Rak&quot;, &quot;Non-Idle Rak&quot;&#10;    )&#10;    var isExpanded by remember { mutableStateOf(false) }&#10;&#10;    Box(modifier = Modifier.padding(horizontal = 20.dp)) {&#10;        Column {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = &quot;Filter By:&quot;,&#10;                    modifier = Modifier&#10;                        .weight(0.4f)&#10;                        .padding(horizontal = 5.dp),&#10;                    fontSize = 16.sp&#10;                )&#10;&#10;                ExposedDropdownMenuBox(&#10;                    expanded = isExpanded,&#10;                    onExpandedChange = { isExpanded = !isExpanded },&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    TextField(&#10;                        value = selectedFilter,&#10;                        onValueChange = {},&#10;                        readOnly = true,&#10;                        trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = isExpanded) },&#10;                        modifier = Modifier&#10;                            .menuAnchor()&#10;                            .fillMaxWidth(),&#10;                        textStyle = TextStyle(lineHeight = 24.sp)&#10;                    )&#10;&#10;                    ExposedDropdownMenu(&#10;                        expanded = isExpanded,&#10;                        onDismissRequest = { isExpanded = false }&#10;                    ) {&#10;                        options.forEach { text -&gt;&#10;                            DropdownMenuItem(&#10;                                text = { Text(text = text) },&#10;                                onClick = {&#10;                                    onFilterChange(text)&#10;                                    isExpanded = false&#10;                                },&#10;                                contentPadding = ExposedDropdownMenuDefaults.ItemContentPadding&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true, showSystemUi = true)&#10;@Composable&#10;fun SearchRakScreenPreview() {&#10;    SearchRakScreen()&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.warehouse_management.screen&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxHeight&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Clear&#10;import androidx.compose.material3.DropdownMenuItem&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.ExposedDropdownMenuBox&#10;import androidx.compose.material3.ExposedDropdownMenuDefaults&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.SnackbarHost   &#10;import androidx.compose.material3.SnackbarHostState&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.material3.TextFieldDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.compose.rememberNavController&#10;import kotlinx.coroutines.launch&#10;import com.example.core_ui.components.BottomNavBar&#10;import com.example.core_ui.components.PageTitleBar&#10;import com.example.warehouse_management.components.FloatingActionButton&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SearchRakScreen() {&#10;    // Snackbar 控制器&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;    val scope = rememberCoroutineScope()&#10;    val navController = rememberNavController()&#10;&#10;    // Add state for search functionality&#10;    var searchText by remember { mutableStateOf(&quot;&quot;) }&#10;    var isSearchActive by remember { mutableStateOf(false) }&#10;&#10;    // Add state for filter functionality&#10;    var selectedFilter by remember { mutableStateOf(&quot;name (A~Z)&quot;) }&#10;&#10;    Scaffold(&#10;        modifier = Modifier&#10;            .fillMaxHeight(),&#10;        topBar = {&#10;            PageTitleBar(navController = navController)&#10;        },&#10;        bottomBar = {&#10;            BottomNavBar(navController = navController)&#10;        },&#10;        snackbarHost = { SnackbarHost(hostState = snackbarHostState) } // 挂载 Snackbar&#10;    ) { innerPadding -&gt;&#10;        // 页面主要内容&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                SearchBar(&#10;                    searchText = searchText,&#10;                    onSearchTextChange = {&#10;                        searchText = it&#10;                        isSearchActive = it.isNotEmpty()&#10;                    },&#10;                    onSearchClick = {&#10;                        // Implement search functionality here&#10;                        scope.launch {&#10;                            snackbarHostState.showSnackbar(&quot;Searching for: $searchText&quot;)&#10;                        }&#10;                    },&#10;                    onClearSearch = {&#10;                        searchText = &quot;&quot;&#10;                        isSearchActive = false&#10;                    },&#10;                    isSearchActive = isSearchActive&#10;                )&#10;                FilterBy(&#10;                    selectedFilter = selectedFilter,&#10;                    onFilterChange = { newFilter -&gt;&#10;                        selectedFilter = newFilter&#10;                        // Add filter logic here&#10;                        scope.launch {&#10;                            snackbarHostState.showSnackbar(&quot;Filter changed to: $newFilter&quot;)&#10;                        }&#10;                    }&#10;                )&#10;                Text(&#10;                    text = when {&#10;                        isSearchActive &amp;&amp; searchText.isNotBlank() -&gt; &quot;No Raks found matching '$searchText'&quot;&#10;                        else -&gt; &quot;No Rak added yet.\nAdd a new Rak from the Add Rak page.&quot;&#10;                    },&#10;                    fontSize = 16.sp,&#10;                    textAlign = TextAlign.Center,&#10;                    color = Color.Gray&#10;                )&#10;                FloatingActionButton(&#10;                    navController = navController,&#10;                    modifier = Modifier.padding(top = 16.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SearchBar(&#10;    searchText: String,&#10;    onSearchTextChange: (String) -&gt; Unit,&#10;    onSearchClick: () -&gt; Unit,&#10;    onClearSearch: () -&gt; Unit,&#10;    isSearchActive: Boolean&#10;) {&#10;    Box(&#10;        modifier = Modifier&#10;            .padding(20.dp)&#10;            .background(Color(0xFFFFFFFF))&#10;    ) {&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            TextField(&#10;                value = searchText,&#10;                onValueChange = onSearchTextChange,&#10;                placeholder = { Text(&quot;Search&quot;) },&#10;                modifier = Modifier.weight(1f),&#10;                colors = TextFieldDefaults.colors(&#10;                    unfocusedContainerColor = Color.Transparent,&#10;                    focusedContainerColor = Color.Transparent,&#10;                    unfocusedIndicatorColor = Color.Transparent,&#10;                    focusedIndicatorColor = Color.Transparent&#10;                )&#10;            )&#10;&#10;            // Clear button (only show when search is active)&#10;            if (isSearchActive &amp;&amp; searchText.isNotBlank()) {&#10;                IconButton(&#10;                    onClick = onClearSearch,&#10;                    modifier = Modifier.padding(5.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Clear,&#10;                        contentDescription = &quot;Clear Search&quot;,&#10;                        modifier = Modifier.size(24.dp),&#10;                        tint = Color.Gray&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun FilterBy(&#10;    selectedFilter: String,&#10;    onFilterChange: (String) -&gt; Unit&#10;) {&#10;    val options = listOf(&#10;        &quot;name (A~Z)&quot;, &quot;name (Z~A)&quot;,&#10;        &quot;Idle Rak&quot;, &quot;Non-Idle Rak&quot;&#10;    )&#10;    var isExpanded by remember { mutableStateOf(false) }&#10;&#10;    Box(modifier = Modifier.padding(horizontal = 20.dp)) {&#10;        Column {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = &quot;Filter By:&quot;,&#10;                    modifier = Modifier&#10;                        .weight(0.4f)&#10;                        .padding(horizontal = 5.dp),&#10;                    fontSize = 16.sp&#10;                )&#10;&#10;                ExposedDropdownMenuBox(&#10;                    expanded = isExpanded,&#10;                    onExpandedChange = { isExpanded = !isExpanded },&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    TextField(&#10;                        value = selectedFilter,&#10;                        onValueChange = {},&#10;                        readOnly = true,&#10;                        trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = isExpanded) },&#10;                        modifier = Modifier&#10;                            .menuAnchor()&#10;                            .fillMaxWidth(),&#10;                        textStyle = TextStyle(lineHeight = 24.sp)&#10;                    )&#10;&#10;                    ExposedDropdownMenu(&#10;                        expanded = isExpanded,&#10;                        onDismissRequest = { isExpanded = false }&#10;                    ) {&#10;                        options.forEach { text -&gt;&#10;                            DropdownMenuItem(&#10;                                text = { Text(text = text) },&#10;                                onClick = {&#10;                                    onFilterChange(text)&#10;                                    isExpanded = false&#10;                                },&#10;                                contentPadding = ExposedDropdownMenuDefaults.ItemContentPadding&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true, showSystemUi = true)&#10;@Composable&#10;fun SearchRakScreenPreview() {&#10;    SearchRakScreen()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>